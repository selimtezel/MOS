<!DOCTYPE html>
<!-- saved from url=(0070)http://localhost/bjc-r/conferences/AA_selim/MOSLessonTeacherGuide.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
        <script async="" src="./multiplicationgame_files/analytics.js"></script><script type="text/javascript" src="./multiplicationgame_files/loader.js"></script><link href="./multiplicationgame_files/bootstrap-compiled.min.css" type="text/css" rel="stylesheet"><script src="./multiplicationgame_files/llab.js" type="text/javascript"></script><script src="./multiplicationgame_files/jquery.min.js" type="text/javascript"></script><script src="./multiplicationgame_files/library.js" type="text/javascript"></script><script src="./multiplicationgame_files/multiplechoice.js" type="text/javascript"></script>
        <script src="./multiplicationgame_files/w3.js"></script>
		<title>Multiplication Game Teacher Guide</title>
    <link href="./multiplicationgame_files/default.css" type="text/css" rel="stylesheet"><link href="./multiplicationgame_files/bjc.css" type="text/css" rel="stylesheet"><script src="./multiplicationgame_files/bootstrap.min.js" type="text/javascript"></script><script src="./multiplicationgame_files/curriculum.js" type="text/javascript"></script><script src="./multiplicationgame_files/course.js" type="text/javascript"></script><script src="./multiplicationgame_files/topic.js" type="text/javascript"></script><script src="./multiplicationgame_files/quiz.js" type="text/javascript"></script><meta name="viewport" content="width=device-width, initial-scale=1"><link href="./multiplicationgame_files/tomorrow-night-blue.css" type="text/css" rel="stylesheet"><script src="./multiplicationgame_files/highlight.min.js" type="text/javascript" onload="llab.highlightSyntax()"></script><link href="./multiplicationgame_files/katex.min.css" type="text/css" rel="stylesheet"><script src="./multiplicationgame_files/katex.min.js" type="text/javascript" onload="llab.displayMathDivs()"></script></head>
    
    <body style="padding-top: 43px;"><nav class="llab-nav navbar navbar-default navbar-fixed-top" role="navigation"><div class="nav navbar-nav navbar-left navbar-title">Multiplication Game Teacher Guide</div><div class="nav navbar-nav navbar-right"><ul class="nav-btns btn-group"></ul></div></nav><div class="title-small-screen">Multiplication Game Teacher Guide</div><div class="full">
      <h2><a href="./multiplicationgame.htm" target="_blank" title="Multiplication Game">Multiplication Game</a></h2>
        
		
        <p><strong>Project Task:</strong> Using the Scratch block-based coding environment, the students will create a multiplication game in which the player will be asked to multiply two random whole numbers (1 through 10) and will receive feedback depending on the correctness of the answer given.</p>
        <p><strong>Grade Levels:</strong> Appropriate for grades 3-5.</p>
       	<p><strong>Previous experience:</strong> It is assumed that the students have Scratch accounts and know how to create a new Scratch project.  They understand the basics of the Scratch interface and the color scheme associated with the blocks. It is also assumed that the students had some previous exposure to <em>variables</em> and <em>control</em> elements such as the <code>"if-then-else"</code> block.</p>
        <h3>Pacing:</h3>
        <p>
        	
			</p><ul>
                <li>40-80 minutes (1-2 class periods)</li>
             </ul>   
        <p></p>
        		
        
		<div>
			<h3>Goals:</h3>
                            <ul>
                                <li>To empower the students by having them create a practical tool useful in their math classes.</li>
                                <li>To provide a meaningful context to reiterate the concept of <em>variables</em>. </li>
                                <li>To provide a meaningful context to reiterate <em>conditionals</em> (<code>if-then-else</code>).</li>
                                <li>To have students start developing elementary algorithms.</li>
                                <li>To have students develop basic debugging skills.</li>
                            </ul>
        
                        
                       
                            <h3>Tips:</h3>
                            <ul>
                                <li>Be sure to go over the entire project on your own so you can anticipate the challenges the students will face and you can help them.</li>  
                                <li>Most students will find it necessary to review the concept of <em>variables</em> and why they may be needed to store values in a program.</li> 
                                <li>Most students will be puzzled by the concept of a <em>random number</em>.  Help them by giving concrete examples such as putting balls numbered 1 through 10 in a hat and picking an arbitrary ball without looking inside the hat.  This could be a good <em>unplugged</em> activity.</li> 
                                <li>Most students will find it necessary to review the structure of a <em>conditional</em> (<code>if-then-else</code> block) and how it can help control the flow of a program.  It may be a good idea to also try an <em>unplugged</em> activity here such as having a student executing a random walk by tossing a coin and, depending on the outcome (heads or tails), turning to the right or left before moving a step.</li>  
                                <li>Most students will find the idea of nesting <code>join</code> blocks difficult and unnatural.  You will probably need to show them what the <code>join</code> block does and how nesting <code>join</code> blocks will help when one is trying to put together a long sentence with multiple parts.</li>
                                <li>Aside from the interventions that may be needed as mentioned above, the project is intended to be done by students moving at their own pace with minimal input from the teacher.  The <em>hint</em> links are intended to allow for differentiation.  Strong students should be able to move ahead without much help.  Others will need to see all the hints.  It is expected that, with the help of hints as needed, most kids will be able to finish the project on their own with  ocassional hand-holding.</li>
                                <li>At the end of the project make sure that the sudents test and debug their programs thoroughly to fix any errors.  It may also be a good idea to have the students test each other's programs to give them some experience with testing other people's code.  </li>
                                                           
                    
                   
                
        </ul></div>
        
        
        <!--<h3>Assignments:</h3>
		
		<div>
            <ul>
                <li>
                	Assessment Ideas:
                    <ul>
                        <li></li>
                        <li>
                        
                    </ul>
                </li>
            </ul>
        </div>-->

			
		<h3>Solutions:</h3>
		<div>
            <ul>
                <li><a href="https://scratch.mit.edu/projects/236639779" target="_blank">Multiplication Game @ Scratch</a></li>
                <li>Step by step tutorial for the Multiplication Game @ YouTube.<br><br>
                <iframe width="504" height="284" src="https://www.youtube.com/embed/R4yo4FeFuM0?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen=""></iframe>
               
            </li></ul>
        </div>
        
        

		<h3>Correlation with Standards:</h3>
        <div class="apStandards">
        	
            
            <h4>Common Core Standards Math/Grade 3</h4>
           
            <ul>
            	<li><strong>CCSS.MATH.CONTENT.3.OA.C.7</strong> Multiply and divide within 100.  Fluently multiply and divide within 100, using strategies such as the relationship between multiplication and division (e.g., knowing that 8 ร 5 = 40, one knows 40 รท 5 = 8) or properties of operations. By the end of Grade 3, know from memory all products of two one-digit numbers.</li>
 </ul>
 			<h4>CSTA K-12 Computer Science Standards/Grades 3-5</h4>
            <ul>
            	<li><strong>1B-AP-09</strong> Create programs that use variables to store and modify data.  Variables are used to store and modify data. At this level, understanding how to use variables is sufficient. For example, students may use mathematical operations to add to the score of a game or subtract from the number of lives available in a game. The use of a variable as a countdown timer is another example.</li>
                <li><strong>1B-AP-10</strong> Create programs that include sequences, events, loops, and conditionals.  Control structures specify the order (sequence) in which instructions are executed within a program and can be combined to support the creation of more complex programs. Events allow portions of a program to run based on a specific action. For example, students could write a program to explain the water cycle and when a specific component is clicked (event), the program would show information about that part of the water cycle. Conditionals allow for the execution of a portion of code in a program when a certain condition is true. For example, students could write a math game that asks multiplication fact questions and then uses a conditional to check whether or not the answer that was entered is correct. Loops allow for the repetition of a sequence of code multiple times. For example, in a program that produces an animation about a famous historical character, students could use a loop to have the character walk across the screen as they introduce themselves.</li>
                <li><strong>1B-AP-15</strong> Test and debug (identify and fix errors) a program or algorithm to ensure it runs as intended.  As students develop programs they should continuously test those programs to see that they do what was expected and fix (debug), any errors. Students should also be able to successfully debug simple errors in programs created by others.</li>
            </ul>
 
        </div>	
</body></html>
